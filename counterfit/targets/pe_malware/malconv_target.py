import os
import numpy as np
import magic

from counterfit.core import config
from secml.array import CArray
from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi
from secml_malware.models import CClassifierEnd2EndMalware, MalConv
from counterfit.core.targets import SecMLMalwareTarget


class MalConvTarget(SecMLMalwareTarget):
    model_name = 'malconv'
    model_data_type = "PE"
    model_output_classes = ["goodware", "malware"]
    model_input_shape = (1, )
    model_location = "local"
    model_endpoint = 'included inside secml-malware'
    sample_input_path = f"{config.targets_path}/pe_malware/samples/malware"

    X = []

    def __init__(self):
        model = CClassifierEnd2EndMalware(MalConv())
        model.load_pretrained_model()
        self.model = CEnd2EndWrapperPhi(model)

        malware_files = os.listdir(self.sample_input_path)
        max_length = 0
        xx = []
        for f in malware_files:
            complete_path = os.path.join(self.sample_input_path, f)

            with open(complete_path, 'rb') as h:
                code = h.read()
            x_i = np.frombuffer(code, dtype=np.uint8)
            max_length = max(max_length, len(x_i))
            xx.append(x_i)
        self.X = [np.append(x_i, [256] * (max_length - len(x_i))
                            ).astype(np.uint8) for x_i in xx]

    def __call__(self, x):
        if type(x) != CArray:
            x = CArray(x)
        x = x.atleast_2d()
        labels, scores = self.model.predict(x, return_decision_function=True)
        labels, scores = labels.atleast_2d(), scores.atleast_2d()
        return labels.tondarray(), scores.tondarray()
