import os
import numpy as np
import magic
import gzip
import shutil


from counterfit.core.state import ArtTarget
from counterfit.core import config
from zipfile import ZipFile
import io
from ember import PEFeatureExtractor
import lightgbm as lgb
import tqdm


class EmberTarget(ArtTarget):
    model_name = 'ember'
    model_data_type = "numpy"
    model_output_classes = ["goodware", "malware"]
    model_input_shape = (1,)
    model_location = "local"
    model_endpoint = os.path.join(
        config.targets_path, 'pe_malware', 'pretrained', 'ember_model.txt')

    sample_input_path = f"{config.targets_path}/pe_malware/samples/MLSEC_samples.zip"
    encryption_password = b'infected'

    X = []

    def __init__(self):
        # load model (gunzip)
        with gzip.open(self.model_endpoint + '.gz', 'rb') as f_in:
            model_data = f_in.read().decode('ascii')

        self.model = lgb.Booster(model_str=model_data)
        self.extractor = PEFeatureExtractor(2)  # feature_version=2
        self.thresh = 0.8336

        print(f"reading malware samples from {self.sample_input_path}")
        self.X = []
        with ZipFile(self.sample_input_path) as thezip:
            thezip.setpassword(self.encryption_password)
            for zipinfo in tqdm.tqdm(thezip.infolist()):
                with thezip.open(zipinfo, pwd=self.encryption_password) as thefile:
                    self.X.append(thefile.read())


    def set_attack_samples(self, index=0):
        if hasattr(index, "__iter__"):
            # list of indices
            out = np.array([self.X[i] for i in index])
        else:
            out = self.X[index]
        
        self.active_attack.sample_index = index
        self.active_attack.samples = out

    def __call__(self, batch):
        features = []
        for bytez in batch:
            feat = np.array(self.extractor.feature_vector(bytez.tobytes()), dtype=np.float32)
            features.append(feat)
        
        scores = np.array(self.model.predict(features))
        labels = scores > self.thresh
        
        return labels
