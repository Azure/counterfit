import os
import numpy as np
import magic

from counterfit.core import config
from secml.array import CArray
from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi
from secml_malware.models import CClassifierEnd2EndMalware, MalConv
from counterfit.core.targets import SecMLMalwareTarget
from zipfile import ZipFile
import tqdm


class MalConvTarget(SecMLMalwareTarget):
    model_name = 'malconv-secml'
    model_data_type = "PE"
    model_output_classes = ["benign", "malicious"]
    model_input_shape = (1, )
    model_location = "local"
    model_endpoint = '(included in secml-malware)'

    sample_input_path = f"{config.targets_path}/pe_malware/samples/MLSEC_samples.zip"
    encryption_password = b'infected'

    X = []

    def __init__(self):
        model = CClassifierEnd2EndMalware(MalConv())
        model.load_pretrained_model()
        self.model = CEnd2EndWrapperPhi(model)

        print(f"reading malware samples from {self.sample_input_path}")
        xx = []
        max_length = 0
        with ZipFile(self.sample_input_path) as thezip:
            thezip.setpassword(self.encryption_password)
            for zipinfo in tqdm.tqdm(thezip.infolist()):
                with thezip.open(zipinfo, pwd=self.encryption_password) as thefile:
                    x_i = thefile.read()
                    xx.append(x_i)
                    max_length = max(max_length, len(x_i))                    


        self.X = [np.append(x_i, [256] * (max_length - len(x_i))
                            ).astype(np.uint8) for x_i in xx]

    def __call__(self, x):
        if type(x) != CArray:
            x = CArray(x)
        x = x.atleast_2d()
        labels, scores = self.model.predict(x, return_decision_function=True)
        labels, scores = labels.atleast_2d(), scores.atleast_2d()
        return labels.tondarray(), scores.tondarray()
