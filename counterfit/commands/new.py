import questionary
import os
import importlib
import cmd2
import inspect
import argparse

from counterfit.core.state import CFState
from counterfit.core import config

parser = argparse.ArgumentParser()
# including this print the correct help message


def nix_path(path):
    new_path = "/".join(path.split("\\"))
    return new_path

@cmd2.with_argparser(parser)
@cmd2.with_category("Counterfit Commands")
def do_new(self, args):
    """Optional wizard to aid in creating a new attack target."""
    model_name = questionary.text("Target name:").ask()
    model_name = model_name.replace(" ", "")

    available_frameworks = list(CFState.get_instance().loaded_frameworks.keys())
    framework_choice = questionary.select("Which framework?", choices=available_frameworks).ask()

    if "textattack" in framework_choice:
        framework = "TextTarget"
    elif "art" in framework_choice:
        framework = "ArtTarget"
    else:
        raise ValueError("invalid framework")

    if framework == "TextTarget":
        model_data_type = "text"
    elif framework == "ArtTarget":
        model_data_type = questionary.select("What data type?", choices=["numpy", "image"]).ask()
    else:
        raise ValueError("invalid framework")

    if model_name not in os.listdir(config.targets_path):
        try:
            os.mkdir(f"{config.targets_path}/{model_name}")
            open(f"{config.targets_path}/{model_name}/__init__.py", "w").close()
            with open(f"{config.targets_path}/{model_name}/{model_name}.py", "w") as f:
                f.write(
                    f"""

# Generated by counterfit #

from counterfit.core.targets import {framework}

class {model_name.capitalize()}({framework}):
    model_name = "{model_name.lower()}"
    model_data_type = "{model_data_type}"
    model_endpoint = ""
    model_input_shape = ()
    model_output_classes = []
    X = []

    def __init__(self):
        self.X = []

    def __call__(self, x):
        return x
"""
                )

            CFState.get_instance().import_targets()
        except Exception as e:

            self.pwarning(f"\n [!] Failed to write target file: {e}.\n")

    else:
        self.pwarning(f"\n [!] {model_name} already exists. Choose a new name.\n")