{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseName": {
      "type": "string",
      "defaultValue": "[concat('counterfit', uniquestring(resourceGroup().id))]"
    },
    "storageContainerName": {
      "type": "string",
      "defaultValue": "counterfit"
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_GRS"
    },
    "accountSasProperties": {
      "type": "object",
      "defaultValue": {
        "signedServices": "b", // blob level access
        "signedPermission": "rw",
        "signedExpiry": "[dateTimeAdd(utcNow('u'), 'P1Y')]", //Expiry 1 year from utc now
        "signedResourceTypes": "co"
      }
    },
    "containerGroupName": {
      "type": "string",
      "defaultValue": "counterfit",
      "metadata": {
        "description": "Name for the container group"
      }
    },
    "containerName": {
      "type": "string",
      "defaultValue": "counterfitcontainer",
      "metadata": {
        "description": "Name of the container inside of the container group"
      }
    },
    "image": {
      "type": "string",
      "defaultValue": "azuretrustworthyml/counterfit:1.1.0",
      "metadata": {
        "description": "Container image to deploy. Should be of the form repoName/imagename:tag for images stored in public Docker Hub, or a fully qualified URI for other registries. Images from private registries require additional registry credentials."
      }
    },
    "port": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "Port to open on the container and the public IP address."
      }
    },
    "cpuCores": {
      "type": "string",
      "defaultValue": "4.0",
      "metadata": {
        "description": "The number of CPU cores to allocate to the container."
      }
    },
    "memoryInGb": {
      "type": "string",
      "defaultValue": "6.0",
      "metadata": {
        "description": "The amount of memory to allocate to the container in gigabytes."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "restartPolicy": {
      "type": "string",
      "defaultValue": "always",
      "allowedValues": [
        "never",
        "always",
        "onfailure"
      ],
      "metadata": {
        "description": "The behavior of Azure runtime if container has stopped."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2019-12-01",
      "name": "[parameters('containerGroupName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('baseName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('baseName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('baseName'), 'default', parameters('storageContainerName'))]"
      ],
      "properties": {
        "containers": [
          {
            "name": "[parameters('containerName')]",
            "properties": {
              "image": "[parameters('image')]",
              "ports": [
                {
                  "port": "[parameters('port')]"
                }
              ],
              "command": [
                "tail",
                "-f",
                "/dev/null"
              ],
              "resources": {
                "requests": {
                  "cpu": "[parameters('cpuCores')]",
                  "memoryInGb": "[parameters('memoryInGb')]"
                }
              },
              "environmentVariables": [
                {
                  "name": "AzureStorageAccountName",
                  "value": "[parameters('baseName')]"
                },
                {
                  "name": "AzureStorageContainerName",
                  "value": "[parameters('storageContainerName')]"
                },
                {
                  "name": "AzureStorageContainerAccessToken",
                  "value": "[listAccountSas(parameters('baseName'), '2018-07-01', parameters('accountSasProperties')).accountSasToken]"
                }
              ]
            }
          }
        ],
        "osType": "Linux",
        "restartPolicy": "[parameters('restartPolicy')]"
      }
    },
    // Storage Account with various published artifacts
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('baseName')]",
      "apiVersion": "2019-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountSku')]",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": true, // Required by Azure Portal blade package and customer scripts
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('baseName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('baseName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": [
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": 30
        }
      }
    },
    // Storage Container for Azure Portal blade package
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('baseName'), '/default/', parameters('storageContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('baseName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('baseName'), 'default')]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    }
  ]
}